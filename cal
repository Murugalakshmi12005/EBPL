<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Simple Calculator (HTML + JS)</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root{
      --bg:#0f1724;
      --card:#111827;
      --accent:#06b6d4;
      --muted:#9ca3af;
      --btn:#1f2937;
      --btn-hover:#374151;
    }
    *{box-sizing:border-box}
    body{
      margin:20px;
      font-family:Inter,Segoe UI,Roboto,Arial;
      background:linear-gradient(180deg,#071226 0%, #081426 100%);
      color:#e6eef7;
      display:flex;
      align-items:center;
      justify-content:center;
      min-height:90vh;
    }

    .calculator{
      width:320px;
      background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
      border-radius:14px;
      padding:18px;
      box-shadow: 0 8px 30px rgba(2,6,23,0.6);
      border:1px solid rgba(255,255,255,0.03);
    }

    .display{
      height:72px;
      background:linear-gradient(180deg, rgba(255,255,255,0.02), transparent);
      border-radius:10px;
      padding:12px;
      display:flex;
      flex-direction:column;
      justify-content:center;
      align-items:flex-end;
      margin-bottom:12px;
      font-weight:600;
    }
    .expr{
      font-size:14px;
      color:var(--muted);
      width:100%;
      text-align:right;
      overflow:hidden;
      text-overflow:ellipsis;
      white-space:nowrap;
    }
    .value{
      font-size:26px;
      width:100%;
      text-align:right;
      overflow:hidden;
      text-overflow:ellipsis;
      white-space:nowrap;
    }

    .keys{
      display:grid;
      grid-template-columns: repeat(4, 1fr);
      gap:10px;
    }

    button.key{
      height:54px;
      border-radius:8px;
      border:0;
      background:var(--btn);
      color:#e6eef7;
      font-size:18px;
      cursor:pointer;
      box-shadow: 0 2px 0 rgba(0,0,0,0.35) inset;
    }
    button.key:active{ transform: translateY(1px); }
    button.op{ background:var(--accent); color:#052025; font-weight:700; }
    button.wide{ grid-column: span 2; }
    button.clear{ background:#ef4444; color:white; }

    footer.note{
      margin-top:12px;
      text-align:center;
      color:var(--muted);
      font-size:12px;
    }

    @media (max-width:360px){ .calculator{ width:92vw } }
  </style>
</head>
<body>

  <div class="calculator" role="application" aria-label="Calculator">
    <div class="display" aria-live="polite">
      <div id="expr" class="expr"></div>
      <div id="value" class="value">0</div>
    </div>

    <div class="keys">
      <button class="key clear" data-action="clear">C</button>
      <button class="key" data-action="back">⌫</button>
      <button class="key" data-action="paren">( )</button>
      <button class="key op" data-action="op" data-value="/">÷</button>

      <button class="key" data-value="7">7</button>
      <button class="key" data-value="8">8</button>
      <button class="key" data-value="9">9</button>
      <button class="key op" data-action="op" data-value="*">×</button>

      <button class="key" data-value="4">4</button>
      <button class="key" data-value="5">5</button>
      <button class="key" data-value="6">6</button>
      <button class="key op" data-action="op" data-value="-">−</button>

      <button class="key" data-value="1">1</button>
      <button class="key" data-value="2">2</button>
      <button class="key" data-value="3">3</button>
      <button class="key op" data-action="op" data-value="+">+</button>

      <button class="key" data-value="0">0</button>
      <button class="key" data-value=".">.</button>
      <button class="key wide" data-action="equals" style="background:linear-gradient(180deg,#06b6d4,#0891b2); color:#001517; font-weight:700;">=</button>
    </div>

    <footer class="note">Supports decimals and parentheses. Example outputs below.</footer>
  </div>

  <script>
    (function(){
      const exprEl = document.getElementById('expr');
      const valueEl = document.getElementById('value');
      let expression = '';          // visible expression string (uses JS operators * / etc)
      let parenToggle = false;

      function refreshDisplay(){
        exprEl.textContent = expression || '';
        valueEl.textContent = expression ? expression : '0';
      }

      // safe evaluate: allow digits, operators, parentheses, decimal and spaces only
      function safeEval(exp){
        // normalize × ÷ and unicode minus to JS operators
        const normalized = exp.replace(/×/g, '*').replace(/÷/g, '/').replace(/−/g, '-');
        // only allow 0-9 + - * / . () and spaces
        if(!/^[0-9+\-*/().\s]+$/.test(normalized)) throw new Error('Invalid characters');
        // disallow sequences like "--" at start? leave JS to handle mostly
        try {
          // Use Function instead of eval
          // wrap in parentheses to allow expression like "2+3"
          // limit the evaluation to the expression only
          const result = Function('"use strict"; return (' + normalized + ')')();
          if (!isFinite(result)) throw new Error('Math error');
          // Round to avoid long floating artifacts
          return Math.round((result + Number.EPSILON) * 1e12) / 1e12;
        } catch(e){
          throw e;
        }
      }

      // handle clicks
      document.querySelectorAll('.key').forEach(btn=>{
        btn.addEventListener('click', () => {
          const val = btn.getAttribute('data-value');
          const action = btn.getAttribute('data-action');

          if(action === 'clear'){
            expression = '';
            refreshDisplay();
            return;
          }
          if(action === 'back'){
            expression = expression.slice(0, -1);
            refreshDisplay();
            return;
          }
          if(action === 'paren'){
            // toggle smart parentheses: insert '(' or ')'
            if(!parenToggle){
              expression += '(';
            } else {
              expression += ')';
            }
            parenToggle = !parenToggle;
            refreshDisplay();
            return;
          }
          if(action === 'op'){
            // operator button uses data-value
            const op = btn.getAttribute('data-value') || val;
            // prevent two operators in a row (except minus for negative numbers)
            if(expression === '' && op !== '-') return; // disallow starting with + * /
            if(/[+\-*/.]$/.test(expression) && op !== '-') {
              // replace last operator with new one
              expression = expression.slice(0, -1) + op;
            } else {
              expression += op;
            }
            refreshDisplay();
            return;
          }
          if(action === 'equals'){
            if(expression.trim() === '') return;
            try{
              const res = safeEval(expression);
              expression = String(res);
              refreshDisplay();
            } catch(e){
              valueEl.textContent = 'Error';
            }
            return;
          }

          // default: number or dot
          if(val){
            // prevent multiple dots in the same number segment
            if(val === '.'){
              // find the part after last operator or parenthesis
              const parts = expression.split(/[\+\-\*\/\(\)]/);
              const last = parts[parts.length - 1];
              if(last.includes('.')) return; // ignore extra dot
              if(last === '') {
                // start number with 0.
                expression += '0';
              }
            }
            expression += val;
            refreshDisplay();
          }
        });
      });

      // keyboard support (optional)
      window.addEventListener('keydown', (e)=>{
        if(e.key >= '0' && e.key <= '9'){ document.querySelector(`button[data-value="${e.key}"]`)?.click(); return; }
        if(e.key === '.') { document.querySelector(`button[data-value="."]`)?.click(); return; }
        if(e.key === 'Enter' || e.key === '=') { document.querySelector('[data-action="equals"]')?.click(); return; }
        if(e.key === 'Backspace') { document.querySelector('[data-action="back"]')?.click(); return; }
        if(e.key === 'Escape') { document.querySelector('[data-action="clear"]')?.click(); return; }
        if(e.key === '+' || e.key === '-' || e.key === '*' || e.key === '/') {
          // map / * + -
          const opBtn = document.querySelector(`.key[data-action="op"][data-value="${e.key}"]`);
          opBtn?.click();
          return;
        }
        if(e.key === '(' || e.key === ')') { document.querySelector('[data-action="paren"]')?.click(); return; }
      });

      // init
      refreshDisplay();
    })();
  </script>
</body>
</html>